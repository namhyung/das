package main

var (
	Insn_arm      map[string]string
	Cond_arm      map[string]string
	CondInsn_arm  []string
	StackInsn_arm []string
)

func init() {
	Insn_arm = map[string]string{
		"adc":             "Add with Carry",
		"add":             "Add",
		"adr":             "Address (PC-relative)",
		"and":             "Bitwise AND",
		"asr":             "Arithmetic Shift Right",
		"b":               "Branch",
		"bfc":             "Bit Field Clear",
		"bfi":             "Bit Field Insert",
		"bic":             "Bit Clear",
		"bkpt":            "Breakpoint",
		"bl":              "Branch with Link",
		"blx":             "Branch with Link and Exchange",
		"bx":              "Branch and Exchange",
		"bxj":             "Branch and Exchange to Jazelle state",
		"cbnz":            "Compare and Branch if Not Zero",
		"cbz":             "Compare and Branch if Zero",
		"cdp":             "Coprocessor Data Processing",
		"clrex":           "Clear Exclusive tag",
		"clz":             "Count Leading Zeros",
		"cmn":             "Compare Negative",
		"cmp":             "Compare",
		"cps":             "Change Processor State",
		"dbg":             "Debug Hint",
		"dmb":             "Data Memory Barrier",
		"dsb":             "Data Synchronization Barrier",
		"eor":             "Exclusive OR",
		"isb":             "Instruction Synchronization Barrier",
		"ldc":             "Load Coprocessor from memory",
		"ldm":             "Load Multiple Registers",
		"ldr":             "Load Register",
		"ldrex":           "Load Register Exclusively",
		"ldrexd":          "Load Double-word Exclusively",
		"ldrexh":          "Load Half-word Exclusively",
		"ldrexb":          "Load Byte Exclusively",
		"lsl":             "Logical Shift Left",
		"lsr":             "Logical Shift Right",
		"mcr":             "Move CPU Register to Coprocessor",
		"mla":             "Multiply and Accumulate",
		"mls":             "Multiply and Subtract",
		"mov":             "Move Register or constant",
		"mrc":             "Move Coprocessor Register to CPU",
		"mrs":             "Move PSR status/flags to Register",
		"msr":             "Move Restier to PSR status/flags",
		"mul":             "Multiply",
		"mvn":             "Move Register with NOT",
		"nop":             "No Operation",
		"orn":             "Bitwise OR with NOT",
		"orr":             "Bitwise OR",
		"push":            "Push Registers to stack",
		"pop":             "Pop Registers from stack",
		"qadd":            "Saturating Add",
		"qdadd":           "Saturating Add (doubled)",
		"qsub":            "Saturating Subtract",
		"qdsub":           "Saturating Subtract (doubled)",
		"rbit":            "Reverse Bits in Word",
		"rev":             "Reverse Bytes in Word",
		"rev16":           "Reverse Bytes in both Half-word",
		"revsh":           "Reverse Bytes in low Half-Word and Sign Extend",
		"rfe":             "Return From Exception",
		"ror":             "Rotate Right",
		"rrx":             "Rotate Right with Extend",
		"rsb":             "Reverse Subtract",
		"rsc":             "Reverse Subtract with Carry",
		"sbc":             "Subtract with Carry",
		"sbfx":            "Signed Bit Field Extract",
		"sel":             "Select Bytes",
		"setend":          "Set Endianness",
		"sev":             "Set Event",
		"smc":             "Secure Monitor Call",
		"smull":           "Multiply Signed Long",
		"smlal":           "Multiply and Accumulate Signed Long",
		"srs":             "Save Return State",
		"stc":             "Store Coprocessor Register to memory",
		"stm":             "Store Multiple Registers",
		"str":             "Store Register",
		"strex":           "Store Register exclusively",
		"strexd":          "Store Double-word exclusively",
		"strexh":          "Store Half-word exclusively",
		"strexb":          "Store Byte exclusively",
		"sub":             "Subtract",
		"svc":             "Supervisor Call",
		"swi":             "Software Interrupt",
		"swp":             "Swap Word",
		"swpb":            "Swap Byte",
		"tbb":             "Table Branch Byte",
		"tbh":             "Table Branch Half-word",
		"teq":             "Test Equality (bitwise)",
		"tst":             "Test",
		"ubfx":            "Unsigned Bit Field Extract",
		"umull":           "Multiply Unsigned Long",
		"umlal":           "Multiply and Accumulate Unsigned Long",
		"umaal":           "Multiply and Double Accumulate Unsigned Long",
		"wfe":             "Wait For Event",
		"wfi":             "Wait For Interrupt",
		"yield":           "Yield for scheduling",
	}

	Cond_arm = map[string]string{
		"eq":   "Equal",
		"ne":   "Not Equal",
		"cs":   "Higher or Same",
		"cc":   "Lower",
		"mi":   "Minus",
		"pl":   "Plus",
		"vs":   "Overflow",
		"vc":   "No Overflow",
		"hi":   "Higher",
		"hs":   "Higher or Same",
		"lo":   "Lower",
		"ls":   "Lower or Same",
		"ae":   "Above or Equal",
		"ge":   "Greater Than or Equal",
		"gt":   "Greater Than",
		"lt":   "Less Than",
		"le":   "Less Than or Equal",
		"al":   "Always",
	}

	CondInsn_arm = []string{"add", "adc", "asr", "lsl", "lsr", "mul", "mla",
		"mov", "mvn", "ror", "rrx", "rsb", "rsc", "sub", "sbc", "smull",
		"smlal", "umull", "umlal"}

	StackInsn_arm = []string{"ldm", "stm", "srs", "rfe"}
}
