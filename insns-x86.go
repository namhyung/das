package main

var (
	Insn_x86_64     map[string]string
	Cond_x86_64     map[string]string
	CondInsn_x86_64 []string
)

func init() {
	Insn_x86_64 = map[string]string{
		"aaa":              "ASCII Adjust After Addition",
		"aad":              "ASCII Adjust AX Before Division",
		"aam":              "ASCII Adjust AX After Multiply",
		"aas":              "ASCII Adjust AL After Subtraction",
		"adc":              "Add with Carry",
		"adcx":             "Unsigned Integer Addition of Two Operands with Carry Flag",
		"add":              "Add",
		"addpd":            "Add Packed Double-FP Values",
		"addps":            "Add Packed Single-FP Values",
		"addsd":            "Add Scalar Double-FP Values",
		"addss":            "Add Scalar Single-FP Values",
		"addsubpd":         "Packed Double-FP Add/Subtract",
		"addsubps":         "Packed Single-FP Add/Subtract",
		"adox":             "Unsigned Integer Addition of Two Operands with Overflow Flag",
		"aesdec":           "Perform One Round of an AES Decryption Flow",
		"aesdeclast":       "Perform Last Round of an AES Decryption Flow",
		"aesenc":           "Perform One Round of an AES Encryption Flow",
		"aesenclast":       "Perform Last Round of an AES Encryption Flow",
		"aesimc":           "Perform the AES InvMixColumn Transformation",
		"aeskeygenassist":  "AES Round Key Generation Assist",
		"and":              "Logical AND",
		"andn":             "Logical AND NOT",
		"andnpd":           "Bitwise Logical AND NOT of Packed Double-FP Values",
		"andnps":           "Bitwise Logical AND NOT of Packed Single-FP Values",
		"andpd":            "Bitwise Logical AND of Packed Double-FP Values",
		"andps":            "Bitwise Logical AND of Packed Single-FP Values",
		"arpl":             "Adjust RPL Field of Segment Selector",
		"bextr":            "Bit Field Extract",
		"blendpd":          "Blend Packed Double-FP Values",
		"blendps":          "Blend Packed Single-FP Values",
		"blendvpd":         "Variable Blend Packed Double-FP Values",
		"blendvps":         "Variable Blend Packed Single-FP Values",
		"blsi":             "Extract Lowest Set Isolated Bit",
		"blsmsk":           "Get Mask Up to Lowest Set Bit",
		"blsr":             "Reset Lowest Set Bit",
		"bndcl":            "Check Lower Bound  [MPX]",
		"bndcu":            "Check Upper Bound  [MPX]",
		"bndcn":            "Check Upper Bound  [MPX]",
		"bndldx":           "Load Extended Bounds using Address Translation  [MPX]",
		"bndmk":            "Make Bounds  [MPX]",
		"bndmov":           "Move Bounds  [MPX]",
		"bndstx":           "Store Extended Bounds using Address Translation  [MPX]",
		"bound":            "Check Array Index Against Bounds",
		"bsf":              "Bit Scan Forward",
		"bsr":              "Bit Scan Reverse",
		"bswap":            "Byte Swap",
		"bt":               "Bit Test",
		"btc":              "Bit Test and Complement",
		"btr":              "Bit Test and Reset",
		"bts":              "Bit Test and Set",
		"bzhi":             "Zero High Bits Starting with Specified Bit Position",
		"call":             "Call Procedure",
		"cbw":              "Convert Byte to Word",
		"cdq":              "Convert Dword to Qword",
		"cdqe":             "Convert Dword to Qword",
		"clac":             "Clear AC Flag in EFLAGS Register",
		"clc":              "Clear Carry Flag",
		"cld":              "Clear Direction Flag",
		"cldemote":         "Cache Line Demote",
		"clflush":          "Flush Cache Line",
		"clflushopt":       "Flush Cache Line Optimized",
		"cli":              "Clear Interrupt Flag",
		"clrssbsy":         "Clear Shadow Stack Busy  [CET]",
		"cltq":             "Convert Dword to Qword (= CDQE)",
		"clts":             "Clear Task-Switched Flag in CR0",
		"clwb":             "Cache Linux Write Back",
		"cmc":              "Complement Carry Flag",
		"cmov":             "Conditional Move",
		"cmp":              "Compare Two Operands",
		"cmppd":            "Compare Packed Double-FP Values",
		"cmpps":            "Compare Packed Single-FP Values",
		"cmps":             "Compare String Operands",
		"cmpsb":            "Compare String Operands",
		"cmpsd":            "Compare String Operands",
		"cmpsq":            "Compare String Operands",
		"cmpss":            "Compare Scalar Single-FP Values",
		"cmpsw":            "Compare String Operands",
		"cmpxchg":          "Compare and Exchange",
		"cmpxchg16b":       "Compare and Exchange Bytes",
		"cmpxchg8b":        "Compare and Exchange Bytes",
		"comisd":           "Compare Scalar Ordered Double-FP Values and Set EFLAGS",
		"comiss":           "Compare Scalar Ordered Single-FP Values and Set EFLAGS",
		"cpuid":            "CPU Identification",
		"cqo":              "Convert Dword to Qword",
		"crc32":            "Accumulate CRC32 Value",
		"cvtdq2pd":         "Convert Packed Dword Integers to Packed Double-FP Values",
		"cvtdq2ps":         "Convert Packed Dword Integers to Packed Single-FP Values",
		"cvtpd2dq":         "Convert Packed Double-FP Values to Packed Dword Integers",
		"cvtpd2pi":         "Convert Packed Double-FP Values to Packed Dword Integers",
		"cvtpd2ps":         "Convert Packed Double-FP Values to Packed Single-FP Values",
		"cvtpi2pd":         "Convert Packed Dword Integers to Packed Double-FP Values",
		"cvtpi2ps":         "Convert Packed Dword Integers to Packed Single-FP Values",
		"cvtps2dq":         "Convert Packed Single-FP Values to Packed Dword Integers",
		"cvtps2pd":         "Convert Packed Single-FP Values to Packed Double-FP Values",
		"cvtps2pi":         "Convert Packed Single-FP Values to Packed Dword Integers",
		"cvtsd2si":         "Convert Scalar Double-FP Value to Integer",
		"cvtsd2ss":         "Convert Scalar Double-FP Value to Scalar Single-FP Value",
		"cvtsi2sd":         "Convert Dword Integer to Scalar Double-FP Value",
		"cvtsi2ss":         "Convert Dword Integer to Scalar Single-FP Value",
		"cvtss2sd":         "Convert Scalar Single-FP Value to Scalar Double-FP Value",
		"cvtss2si":         "Convert Scalar Single-FP Value to Dword Integer",
		"cvttpd2dq":        "Convert with Truncation Packed Double-FP Values to Packed Dword Integers",
		"cvttpd2pi":        "Convert with Truncation Packed Double-FP Values to Packed Dword Integers",
		"cvttps2dq":        "Convert with Truncation Packed Single-FP Values to Packed Dword Integers",
		"cvttps2pi":        "Convert with Truncation Packed Single-FP Values to Packed Dword Integers",
		"cvttsd2si":        "Convert with Truncation Scalar Double-FP Value to Signed Integer",
		"cvttss2si":        "Convert with Truncation Scalar Single-FP Value to Dword Integer",
		"cwd":              "Convert Word to Dword",
		"cwde":             "Convert Word to Dword",
		"cwtl":             "Convert Word to Dword (= CWDE)",
		"daa":              "Decimal Adjust AL after Addition",
		"das":              "Decimal Adjust AL after Subtraction",
		"dec":              "Decrement by 1",
		"div":              "Unsigned Divide",
		"divpd":            "Divide Packed Double-FP Values",
		"divps":            "Divide Packed Single-FP Values",
		"divsd":            "Divide Scalar Double-FP Values",
		"divss":            "Divide Scalar Single-FP Values",
		"dppd":             "Dot Product of Packed Double-FP Values",
		"dpps":             "Dot Product of Packed Single-FP Values",
		"emms":             "Empty MMX Technology State",
		"endbr32":          "End of Branch (indirect branch target)  [CET]",
		"endbr64":          "End of Branch (indirect branch target)  [CET]",
		"enter":            "Make Stack Frame for Procedure Parameters",
		"extractps":        "Extract Packed Single-FP Value",
		"f2xm1":            "Compute 2xâ€“1",
		"fabs":             "Absolute Value",
		"fadd":             "Add",
		"faddp":            "Add and Pop",
		"fbld":             "Load Binary Coded Decimal",
		"fbstp":            "Store BCD Integer and Pop",
		"fchs":             "Change Sign",
		"fclex":            "Clear Exceptions",
		"fcmov":            "Floating-Point Conditional Move",
		"fcom":             "Compare Floating Point Values",
		"fcomi":            "Compare Floating Point Values and Set EFLAGS",
		"fcomip":           "Compare Floating Point Values and Set EFLAGS and Pop",
		"fcomp":            "Compare Floating Point Values and Pop",
		"fcompp":           "Compare Floating Point Values and Pop twice",
		"fcos":             "Cosine",
		"fdecstp":          "Decrement Stack-Top Pointer",
		"fdiv":             "Divide",
		"fdivp":            "Divide and Pop",
		"fdivr":            "Reverse Divide",
		"fdivrp":           "Reverse Divide and Pop",
		"ffree":            "Free Floating-Point Register",
		"fiadd":            "Add",
		"ficom":            "Compare Integer",
		"ficomp":           "Compare Integer and Pop",
		"fidiv":            "Divide",
		"fidivr":           "Reverse Divide",
		"fild":             "Load Integer",
		"fimul":            "Multiply",
		"fincstp":          "Increment Stack-Top Pointer",
		"finit":            "Initialize Floating-Point Unit",
		"fist":             "Store Integer",
		"fistp":            "Store Integer and Pop",
		"fisttp":           "Store Integer with Truncation",
		"fisub":            "Subtract",
		"fisubr":           "Reverse Subtract",
		"fld":              "Load Floating Point Value",
		"fld1":             "Load Constant (+1.0)",
		"fldcw":            "Load x87 FPU Control Word",
		"fldenv":           "Load x87 FPU Environment",
		"fldl2e":           "Load Constant (log_2(e))",
		"fldl2t":           "Load Constant (log_2(10))",
		"fldlg2":           "Load Constant (log_10(2))",
		"fldln2":           "Load Constant (log_e(2))",
		"fldpi":            "Load Constant (PI)",
		"fldz":             "Load Constant (+0.0)",
		"fmul":             "Multiply",
		"fmulp":            "Multiply and Pop",
		"fnclex":           "Clear Exceptions",
		"fninit":           "Initialize Floating-Point Unit",
		"fnop":             "No Operation",
		"fnsave":           "Store x87 FPU State",
		"fnstcw":           "Store x87 FPU Control Word",
		"fnstenv":          "Store x87 FPU Environment",
		"fnstsw":           "Store x87 FPU Status Word",
		"fpatan":           "Partial Arctangent",
		"fprem":            "Partial Remainder",
		"fprem1":           "Partial Remainder (IEEE)",
		"fptan":            "Partial Tangent",
		"frndint":          "Round to Integer",
		"frstor":           "Restore x87 FPU State",
		"fsave":            "Store x87 FPU State",
		"fscale":           "Scale",
		"fsin":             "Sine",
		"fsincos":          "Sine and Cosine",
		"fsqrt":            "Square Root",
		"fst":              "Store Floating Point Value",
		"fstcw":            "Store x87 FPU Control Word",
		"fstenv":           "Store x87 FPU Environment",
		"fstp":             "Store Floating Point Value",
		"fstsw":            "Store x87 FPU Status Word",
		"fsub":             "Subtract",
		"fsubp":            "Subtract and Pop",
		"fsubr":            "Reverse Subtract",
		"fsubrp":           "Reverse Subtract and Pop",
		"ftst":             "Test",
		"fucom":            "Unordered Compare Floating Point Values",
		"fucomi":           "Unordered Compare Floating Point Values and Set EFLAGS",
		"fucomip":          "Unordered Compare Floating Point Values and Set EFLAGS and Pop",
		"fucomp":           "Unordered Compare Floating Point Values and Pop",
		"fucompp":          "Unordered Compare Floating Point Values and Pop twice",
		"fwait":            "Wait",
		"fxam":             "Examine ModR/M",
		"fxch":             "Exchange Register Contents",
		"fxrstor":          "Restore x87 FPU, MMX, XMM, and MXCSR State",
		"fxsave":           "Save x87 FPU, MMX Technology, and SSE State",
		"fxtract":          "Extract Exponent and Significand",
		"fyl2x":            "Compute y âˆ— log2x",
		"fyl2xp1":          "Compute y âˆ— log2(x + 1)",
		"gf2p8affineinvqb": "Galois Field Affine Transformation Inverse  [GFNI]",
		"gf2p8affineqb":    "Galois Field Affine Transformation  [GFNI]",
		"gf2p8mulb":        "Galois Field Multiply Bytes  [GFNI]",
		"haddpd":           "Packed Double-FP Horizontal Add",
		"haddps":           "Packed Single-FP Horizontal Add",
		"hlt":              "Halt",
		"hsubpd":           "Packed Double-FP Horizontal Subtract",
		"hsubps":           "Packed Single-FP Horizontal Subtract",
		"idiv":             "Signed Divide",
		"imul":             "Signed Multiply",
		"in":               "Input from Port",
		"inc":              "Increment by 1",
		"incssp":           "Increment Shadow Stack Pointer  [CET]",
		"ins":              "Input from Port to String",
		"insb":             "Input Byte from Port to String",
		"insd":             "Input Dword from Port to String",
		"insertps":         "Insert Packed Single-FP Value",
		"insw":             "Input Word from Port to String",
		"int":              "Call to Interrupt Procedure",
		"into":             "Overflow Exception (INT 4)",
		"int1":             "Debug Exception (INT 1)",
		"int3":             "Breakpoint Exception (INT 3)",
		"invd":             "Invalidate Internal Caches",
		"invlpg":           "Invalidate TLB Entries",
		"invpcid":          "Invalidate Process-Context Identifier",
		"iret":             "Interrupt Return",
		"iretd":            "Interrupt Return",
		"j":                "Conditional Jump",
		"jmp":              "Jump",
		"lahf":             "Load Status Flags into AH Register",
		"lar":              "Load Access Rights Byte",
		"lddqu":            "Load Unaligned Integer 128 Bits",
		"ldmxcsr":          "Load MXCSR Register",
		"lds":              "Load Far Pointer (with DS)",
		"lea":              "Load Effective Address",
		"leave":            "High Level Procedure Exit",
		"les":              "Load Far Pointer (with ES)",
		"lfence":           "Load Fence",
		"lfs":              "Load Far Pointer (with FS)",
		"lgdt":             "Load Global Descriptor Table Register",
		"lgs":              "Load Far Pointer (with GS)",
		"lidt":             "Load Interrupt Descriptor Table Register",
		"lldt":             "Load Local Descriptor Table Register",
		"lmsw":             "Load Machine Status Word",
		"lock":             "Assert LOCK# Signal Prefix",
		"lods":             "Load String",
		"lodsb":            "Load Byte String",
		"lodsd":            "Load Dword String",
		"lodsq":            "Load Qword String",
		"lodsw":            "Load Word String",
		"loop":             "Loop According to ECX Counter",
		"lsl":              "Load Segment Limit",
		"lss":              "Load Far Pointer (with SS)",
		"ltr":              "Load Task Register",
		"lzcnt":            "Count the Number of Leading Zero Bits",
		"maskmovdqu":       "Store Selected Bytes of Double Quadword",
		"maskmovq":         "Store Selected Bytes of Quadword",
		"maxpd":            "Return Maximum Packed Double-FP Values",
		"maxps":            "Return Maximum Packed Single-FP Values",
		"maxsd":            "Return Maximum Scalar Double-FP Value",
		"maxss":            "Return Maximum Scalar Single-FP Value",
		"mfence":           "Memory Fence",
		"minpd":            "Return Minimum Packed Double-FP Values",
		"minps":            "Return Minimum Packed Single-FP Values",
		"minsd":            "Return Minimum Scalar Double-FP Value",
		"minss":            "Return Minimum Scalar Single-FP Value",
		"monitor":          "Set Up Monitor Address",
		"mov":              "Move",
		"movabs":           "Move 64-bit Absolute Value",
		"movapd":           "Move Aligned Packed Double-FP Values",
		"movaps":           "Move Aligned Packed Single-FP Values",
		"movbe":            "Move Data After Swapping Bytes",
		"movd":             "Move Dword",
		"movddup":          "Move One Double-FP and Duplicate",
		"movdiri":          "Move Dword as Direct Store",
		"movdir64b":        "Move 64 Bytes as Direct Store",
		"movdq2q":          "Move Qword from XMM to MMX Technology Register",
		"movdqa":           "Move Aligned Double Qword  [SSE2]",
		"movdqu":           "Move Unaligned Double Qword  [SSE2]",
		"movhlps":          "Move Packed Single-FP Values High to Low",
		"movhpd":           "Move High Packed Double-FP Value",
		"movhps":           "Move High Packed Single-FP Values",
		"movlhps":          "Move Packed Single-FP Values Low to High",
		"movlpd":           "Move Low Packed Double-FP Value",
		"movlps":           "Move Low Packed Single-FP Values",
		"movmskpd":         "Extract Packed Double-FP Sign Mask",
		"movmskps":         "Extract Packed Single-FP Sign Mask",
		"movntdq":          "Store Double Qword Using Non-Temporal Hint",
		"movntdqa":         "Load Double Qword Non-Temporal Aligned Hint",
		"movnti":           "Store Dword Using Non-Temporal Hint",
		"movntpd":          "Store Packed Double-FP Values Using Non-Temporal Hint",
		"movntps":          "Store Packed Single-FP Values Using Non-Temporal Hint",
		"movntq":           "Store of Qword Using Non-Temporal Hint",
		"movq":             "Move Qword",
		"movq2dq":          "Move Qword from MMX Technology to XMM Register",
		"movs":             "Move Data from String to String",
		"movsb":            "Move Byte Data from String to String",
		"movsd":            "Move Dword Data from String to String", // XXX: overloaded
		"movshdup":         "Move Packed Single-FP High and Duplicate  [SSE3]",
		"movsldup":         "Move Packed Single-FP Low and Duplicate  [SSE3]",
		"movsq":            "Move Qword Data from String to String",
		"movss":            "Move Scalar Single-Precision Floating-Point Values",
		"movsw":            "Move Word Data from String to String",
		"movsx":            "Move with Sign-Extension",
		"movsxd":           "Move with Sign-Extension",
		"movsbw":           "Move with Sign-Extension: Byte to Word",
		"movsbl":           "Move with Sign-Extension: Byte to Dword",
		"movsbq":           "Move with Sign-Extension: Byte to Qword",
		"movswl":           "Move with Sign-Extension: Word to Dword",
		"movswq":           "Move with Sign-Extension: Word to Qword",
		"movslq":           "Move with Sign-Extension: Dword to Qword",
		"movupd":           "Move Unaligned Packed Double-FP Values  [SSE2]",
		"movups":           "Move Unaligned Packed Single-FP Values  [SSE]",
		"movzx":            "Move with Zero-Extension",
		"movzbw":           "Move with Zero-Extension: Byte to Word",
		"movzbl":           "Move with Zero-Extension: Byte to Dword",
		"movzbq":           "Move with Zero-Extension: Byte to Qword",
		"movzwl":           "Move with Zero-Extension: Word to Dword",
		"movzwq":           "Move with Zero-Extension: Word to Qword",
		"movzlq":           "Move with Zero-Extension: Dword to Qword",
		"mpsadbw":          "Compute Multiple Packed Sums of Absolute Difference  [SSE4]",
		"mul":              "Unsigned Multiply",
		"mulpd":            "Multiply Packed Double-FP Values  [SSE2]",
		"mulps":            "Multiply Packed Single-FP Values  [SSE]",
		"mulsd":            "Multiply Scalar Double-FP Values  [SSE2]",
		"mulss":            "Multiply Scalar Single-FP Values  [SSE]",
		"mwait":            "Monitor Wait",
		"mulx":             "Unsigned Multiply Without Affecting Flags",
		"neg":              "Two's Complement Negation",
		"nop":              "No Operation",
		"not":              "One's Complement Negation",
		"or":               "Logical Inclusive OR",
		"orpd":             "Bitwise Logical OR of Double-FP Values",
		"orps":             "Bitwise Logical OR of Single-FP Values",
		"out":              "Output to Port",
		"outs":             "Output String to Port",
		"outsb":            "Output Byte String to Port",
		"outsd":            "Output Dword String to Port",
		"outsw":            "Output Word String to Port",
		"pabsb":            "Packed Absolute Byte Value",
		"pabsd":            "Packed Absolute Dword Value",
		"pabsw":            "Packed Absolute Word Value",
		"packssdw":         "Pack with Signed Saturation",
		"packsswb":         "Pack with Signed Saturation",
		"packusdw":         "Pack with Unsigned Saturation",
		"packuswb":         "Pack with Unsigned Saturation",
		"paddb":            "Add Packed Integers",
		"paddd":            "Add Packed Integers",
		"paddq":            "Add Packed Qword Integers",
		"paddsb":           "Add Packed Signed Integers with Signed Saturation",
		"paddsw":           "Add Packed Signed Integers with Signed Saturation",
		"paddusb":          "Add Packed Unsigned Integers with Unsigned Saturation",
		"paddusw":          "Add Packed Unsigned Integers with Unsigned Saturation",
		"paddw":            "Add Packed Integers",
		"palignr":          "Packed Align Right",
		"pand":             "Logical AND",
		"pandn":            "Logical AND NOT",
		"pause":            "Spin Loop Hint",
		"pavgb":            "Average Packed Integers",
		"pavgw":            "Average Packed Integers",
		"pblendvb":         "Variable Blend Packed Bytes",
		"pblendw":          "Blend Packed Words",
		"pclmulqdq":        "Carry-Less Multiplication Quadword",
		"pcmpeqb":          "Compare Packed Data for Equal",
		"pcmpeqd":          "Compare Packed Data for Equal",
		"pcmpeqq":          "Compare Packed Qword Data for Equal",
		"pcmpeqw":          "Compare Packed Data for Equal",
		"pcmpestri":        "Packed Compare Explicit Length Strings, Return Index",
		"pcmpestrm":        "Packed Compare Explicit Length Strings, Return Mask",
		"pcmpgtb":          "Compare Packed Signed Integers for Greater Than",
		"pcmpgtd":          "Compare Packed Signed Integers for Greater Than",
		"pcmpgtq":          "Compare Packed Data for Greater Than",
		"pcmpgtw":          "Compare Packed Signed Integers for Greater Than",
		"pcmpistri":        "Packed Compare Implicit Length Strings, Return Index",
		"pcmpistrm":        "Packed Compare Implicit Length Strings, Return Mask",
		"pdep":             "Parallel Bits Deposit",
		"pext":             "Parallel Bits Extract",
		"pextrb":           "Extract Byte",
		"pextrd":           "Extract Dword",
		"pextrq":           "Extract Qword",
		"pextrw":           "Extract Word",
		"phaddd":           "Packed Horizontal Add",
		"phaddsw":          "Packed Horizontal Add and Saturate",
		"phaddw":           "Packed Horizontal Add",
		"phminposuw":       "Packed Horizontal Word Minimum",
		"phsubd":           "Packed Horizontal Subtract",
		"phsubsw":          "Packed Horizontal Subtract and Saturate",
		"phsubw":           "Packed Horizontal Subtract",
		"pinsrb":           "Insert Byte",
		"pinsrd":           "Insert Dword",
		"pinsrq":           "Insert Qword",
		"pinsrw":           "Insert Word",
		"pmaddubsw":        "Multiply and Add Packed Signed and Unsigned Bytes",
		"pmaddwd":          "Multiply and Add Packed Integers",
		"pmaxsb":           "Maximum of Packed Signed Byte Integers",
		"pmaxsd":           "Maximum of Packed Signed Dword Integers",
		"pmaxsw":           "Maximum of Packed Signed Word Integers",
		"pmaxub":           "Maximum of Packed Unsigned Byte Integers",
		"pmaxud":           "Maximum of Packed Unsigned Dword Integers",
		"pmaxuw":           "Maximum of Packed Word Integers",
		"pminsb":           "Minimum of Packed Signed Byte Integers",
		"pminsd":           "Minimum of Packed Dword Integers",
		"pminsw":           "Minimum of Packed Signed Word Integers",
		"pminub":           "Minimum of Packed Unsigned Byte Integers",
		"pminud":           "Minimum of Packed Dword Integers",
		"pminuw":           "Minimum of Packed Word Integers",
		"pmovmskb":         "Move Byte Mask",
		"pmovsx":           "Packed Move with Sign Extend",
		"pmovzx":           "Packed Move with Zero Extend",
		"pmuldq":           "Multiply Packed Signed Dword Integers",
		"pmulhrsw":         "Packed Multiply High with Round and Scale",
		"pmulhuw":          "Multiply Packed Unsigned Integers and Store High Result",
		"pmulhw":           "Multiply Packed Signed Integers and Store High Result",
		"pmulld":           "Multiply Packed Signed Dword Integers and Store Low Result",
		"pmullw":           "Multiply Packed Signed Integers and Store Low Result",
		"pmuludq":          "Multiply Packed Unsigned Doubleword Integers",
		"pop":              "Pop a Value from the Stack",
		"popa":             "Pop All General-Purpose Registers",
		"popad":            "Pop All General-Purpose Registers",
		"popcnt":           "Return the Count of Number of Bits Set to 1",
		"popf":             "Pop Stack into EFLAGS Register",
		"popfd":            "Pop Stack into EFLAGS Register",
		"popfq":            "Pop Stack into EFLAGS Register",
		"por":              "Bitwise Logical OR",
		"prefetchw":        "Prefetch Data into Caches in Anticipation of a Write",
		"prefetchwt1":      "Prefetch Vector Data Into Caches with Intent to Write and T1 Hint",
		"prefetch":         "Prefetch Data Into Caches",
		"psadbw":           "Compute Sum of Absolute Differences",
		"pshufb":           "Packed Shuffle Bytes",
		"pshufd":           "Shuffle Packed Dwords",
		"pshufhw":          "Shuffle Packed High Words",
		"pshuflw":          "Shuffle Packed Low Words",
		"pshufw":           "Shuffle Packed Words",
		"psignb":           "Packed SIGN",
		"psignd":           "Packed SIGN",
		"psignw":           "Packed SIGN",
		"pslld":            "Shift Packed Data Left Logical",
		"pslldq":           "Shift Double Qword Left Logical",
		"psllq":            "Shift Packed Data Left Logical",
		"psllw":            "Shift Packed Data Left Logical",
		"psrad":            "Shift Packed Data Right Arithmetic",
		"psraw":            "Shift Packed Data Right Arithmetic",
		"psrld":            "Shift Packed Data Right Logical",
		"psrldq":           "Shift Double Qword Right Logical",
		"psrlq":            "Shift Packed Data Right Logical",
		"psrlw":            "Shift Packed Data Right Logical",
		"psubb":            "Subtract Packed Integers",
		"psubd":            "Subtract Packed Integers",
		"psubq":            "Subtract Packed Qword Integers",
		"psubsb":           "Subtract Packed Signed Integers with Signed Saturation",
		"psubsw":           "Subtract Packed Signed Integers with Signed Saturation",
		"psubusb":          "Subtract Packed Unsigned Integers with Unsigned Saturation",
		"psubusw":          "Subtract Packed Unsigned Integers with Unsigned Saturation",
		"psubw":            "Subtract Packed Integers",
		"ptest":            "Logical Compare",
		"punpckhbw":        "Unpack High Data",
		"punpckhdq":        "Unpack High Data",
		"punpckhqdq":       "Unpack High Data",
		"punpckhwd":        "Unpack High Data",
		"punpcklbw":        "Unpack Low Data",
		"punpckldq":        "Unpack Low Data",
		"punpcklqdq":       "Unpack Low Data",
		"punpcklwd":        "Unpack Low Data",
		"push":             "Push Word, Dword or Qword Onto the Stack",
		"pusha":            "Push All General-Purpose Registers",
		"pushad":           "Push All General-Purpose Registers",
		"pushf":            "Push EFLAGS Register onto the Stack",
		"pushfd":           "Push EFLAGS Register onto the Stack",
		"pxor":             "Logical Exclusive OR",
		"rcl":              "Rotate Left",
		"rcpps":            "Compute Reciprocals of Packed Single-FP Values",
		"rcpss":            "Compute Reciprocal of Scalar Single-FP Values",
		"rcr":              "Rotate Right",
		"rdfsbase":         "Read FS/GS Segment Base",
		"rdgsbase":         "Read FS/GS Segment Base",
		"rdmsr":            "Read from Model Specific Register",
		"rdpmc":            "Read Performance-Monitoring Counters",
		"rdrand":           "Read Random Number",
		"rdseed":           "Read Random SEED",
		"rdssp":            "Read Shadow Stack Pointer  [CET]",
		"rdtsc":            "Read Time-Stamp Counter",
		"rdtscp":           "Read Time-Stamp Counter and Processor ID",
		"rep":              "Repeat String Operation Prefix",
		"repe":             "Repeat String Operation Prefix",
		"repne":            "Repeat String Operation Prefix",
		"repnz":            "Repeat String Operation Prefix",
		"repz":             "Repeat String Operation Prefix",
		"ret":              "Return from Procedure",
		"rol":              "Rotate Left",
		"ror":              "Rotate Right",
		"rorx":             "Rotate Right Logical Without Affecting Flags",
		"roundpd":          "Round Packed Double-FP Values",
		"roundps":          "Round Packed Single-FP Values",
		"roundsd":          "Round Scalar Double-FP Values",
		"roundss":          "Round Scalar Single-FP Values",
		"rsm":              "Resume from System Management Mode",
		"rsqrtps":          "Compute Reciprocals of Square Roots of Packed Single-FP Values",
		"rsqrtss":          "Compute Reciprocal of Square Root of Scalar Single-FP Value",
		"rstorssp":         "Restore Shadow Stack Pointer  [CET]",
		"sahf":             "Store AH into Flags",
		"sal":              "Shift Arithmetic Left",
		"sar":              "Shift Arithmetic Right",
		"sarx":             "Shift Without Affecting Flags",
		"savessp":          "Save Shadow Stack Pointer  [CET]",
		"sbb":              "Integer Subtraction with Borrow",
		"scas":             "Scan String",
		"scasb":            "Scan Byte String",
		"scasd":            "Scan Dword String",
		"scasw":            "Scan Word String",
		"set":              "Set Byte on Condition",
		"setssbsy":         "Set Shadow Stack Busy  [CET]",
		"sfence":           "Store Fence",
		"sgdt":             "Store Global Descriptor Table Register",
		"shl":              "Shift Logical Left",
		"shld":             "Double Precision Shift Left",
		"shlx":             "Shift Without Affecting Flags",
		"shr":              "Shift Logical Right",
		"shrd":             "Double Precision Shift Right",
		"shrx":             "Shift Without Affecting Flags",
		"shufpd":           "Shuffle Packed Double-FP Values",
		"shufps":           "Shuffle Packed Single-FP Values",
		"sidt":             "Store Interrupt Descriptor Table Register",
		"sldt":             "Store Local Descriptor Table Register",
		"smsw":             "Store Machine Status Word",
		"sqrtpd":           "Compute Square Roots of Packed Double-FP Values",
		"sqrtps":           "Compute Square Roots of Packed Single-FP Values",
		"sqrtsd":           "Compute Square Root of Scalar Double-FP Value",
		"sqrtss":           "Compute Square Root of Scalar Single-FP Value",
		"stac":             "Set AC Flag in EFLAGS Register",
		"stc":              "Set Carry Flag",
		"std":              "Set Direction Flag",
		"sti":              "Set Interrupt Flag",
		"stmxcsr":          "Store MXCSR Register State",
		"stos":             "Store String",
		"stosb":            "Store Byte String",
		"stosd":            "Store Dword String",
		"stosq":            "Store Qword String",
		"stosw":            "Store Word String",
		"str":              "Store Task Register",
		"sub":              "Subtract",
		"subpd":            "Subtract Packed Double-FP Values",
		"subps":            "Subtract Packed Single-FP Values",
		"subsd":            "Subtract Scalar Double-FP Values",
		"subss":            "Subtract Scalar Single-FP Values",
		"swapgs":           "Swap GS Base Register",
		"syscall":          "Fast System Call",
		"sysenter":         "Fast System Call",
		"sysexit":          "Fast Return from Fast System Call",
		"sysret":           "Return From Fast System Call",
		"test":             "Logical Compare",
		"tzcnt":            "Count the Number of Trailing Zero Bits",
		"ucomisd":          "Unordered Compare Scalar Double-FP Values and Set EFLAGS",
		"ucomiss":          "Unordered Compare Scalar Single-FP Values and Set EFLAGS",
		"ud2":              "Undefined Instruction",
		"unpckhpd":         "Unpack and Interleave High Packed Double-FP Values",
		"unpckhps":         "Unpack and Interleave High Packed Single-FP Values",
		"unpcklpd":         "Unpack and Interleave Low Packed Double-FP Values",
		"unpcklps":         "Unpack and Interleave Low Packed Single-FP Values",
		"vbroadcast":       "Broadcast Floating-Point Data",
		"vcvtph2ps":        "Convert 16-bit FP Values to Single-FP Values",
		"vcvtps2ph":        "Convert Single-FP value to 16-bit FP value",
		"verr":             "Verify a Segment for Reading or Writing",
		"verw":             "Verify a Segment for Reading or Writing",
		"vextractf128":     "Extract Packed Floating-Point Values",
		"vextracti128":     "Extract packed Integer Values",
		"vfmadd132pd":      "Fused Multiply-Add of Packed Double-FP Values",
		"vfmadd132ps":      "Fused Multiply-Add of Packed Single-FP Values",
		"vfmadd132sd":      "Fused Multiply-Add of Scalar Double-FP Values",
		"vfmadd132ss":      "Fused Multiply-Add of Scalar Single-FP Values",
		"vfmadd213pd":      "Fused Multiply-Add of Packed Double-FP Values",
		"vfmadd213ps":      "Fused Multiply-Add of Packed Single-FP Values",
		"vfmadd213sd":      "Fused Multiply-Add of Scalar Double-FP Values",
		"vfmadd213ss":      "Fused Multiply-Add of Scalar Single-FP Values",
		"vfmadd231pd":      "Fused Multiply-Add of Packed Double-FP Values",
		"vfmadd231ps":      "Fused Multiply-Add of Packed Single-FP Values",
		"vfmadd231sd":      "Fused Multiply-Add of Scalar Double-FP Values",
		"vfmadd231ss":      "Fused Multiply-Add of Scalar Single-FP Values",
		"vfmaddsub132pd":   "Fused Multiply-Alternating Add/Subtract of Packed Double-FP Values",
		"vfmaddsub132ps":   "Fused Multiply-Alternating Add/Subtract of Packed Single-FP Values",
		"vfmaddsub213pd":   "Fused Multiply-Alternating Add/Subtract of Packed Double-FP Values",
		"vfmaddsub213ps":   "Fused Multiply-Alternating Add/Subtract of Packed Single-FP Values",
		"vfmaddsub231pd":   "Fused Multiply-Alternating Add/Subtract of Packed Double-FP Values",
		"vfmaddsub231ps":   "Fused Multiply-Alternating Add/Subtract of Packed Single-FP Values",
		"vfmsub132pd":      "Fused Multiply-Subtract of Packed Double-FP Values",
		"vfmsub132ps":      "Fused Multiply-Subtract of Packed Single-FP Values",
		"vfmsub132sd":      "Fused Multiply-Subtract of Scalar Double-FP Values",
		"vfmsub132ss":      "Fused Multiply-Subtract of Scalar Single-FP Values",
		"vfmsub213pd":      "Fused Multiply-Subtract of Packed Double-FP Values",
		"vfmsub213ps":      "Fused Multiply-Subtract of Packed Single-FP Values",
		"vfmsub213sd":      "Fused Multiply-Subtract of Scalar Double-FP Values",
		"vfmsub213ss":      "Fused Multiply-Subtract of Scalar Single-FP Values",
		"vfmsub231pd":      "Fused Multiply-Subtract of Packed Double-FP Values",
		"vfmsub231ps":      "Fused Multiply-Subtract of Packed Single-FP Values",
		"vfmsub231sd":      "Fused Multiply-Subtract of Scalar Double-FP Values",
		"vfmsub231ss":      "Fused Multiply-Subtract of Scalar Single-FP Values",
		"vfmsubadd132pd":   "Fused Multiply-Alternating Subtract/Add of Packed Double-FP Values",
		"vfmsubadd132ps":   "Fused Multiply-Alternating Subtract/Add of Packed Single-FP Values",
		"vfmsubadd213pd":   "Fused Multiply-Alternating Subtract/Add of Packed Double-FP Values",
		"vfmsubadd213ps":   "Fused Multiply-Alternating Subtract/Add of Packed Single-FP Values",
		"vfmsubadd231pd":   "Fused Multiply-Alternating Subtract/Add of Packed Double-FP Values",
		"vfmsubadd231ps":   "Fused Multiply-Alternating Subtract/Add of Packed Single-FP Values",
		"vfnmadd132pd":     "Fused Negative Multiply-Add of Packed Double-FP Values",
		"vfnmadd132ps":     "Fused Negative Multiply-Add of Packed Single-FP Values",
		"vfnmadd132sd":     "Fused Negative Multiply-Add of Scalar Double-FP Values",
		"vfnmadd132ss":     "Fused Negative Multiply-Add of Scalar Single-FP Values",
		"vfnmadd213pd":     "Fused Negative Multiply-Add of Packed Double-FP Values",
		"vfnmadd213ps":     "Fused Negative Multiply-Add of Packed Single-FP Values",
		"vfnmadd213sd":     "Fused Negative Multiply-Add of Scalar Double-FP Values",
		"vfnmadd213ss":     "Fused Negative Multiply-Add of Scalar Single-FP Values",
		"vfnmadd231pd":     "Fused Negative Multiply-Add of Packed Double-FP Values",
		"vfnmadd231ps":     "Fused Negative Multiply-Add of Packed Single-FP Values",
		"vfnmadd231sd":     "Fused Negative Multiply-Add of Scalar Double-FP Values",
		"vfnmadd231ss":     "Fused Negative Multiply-Add of Scalar Single-FP Values",
		"vfnmsub132pd":     "Fused Negative Multiply-Subtract of Packed Double-FP Values",
		"vfnmsub132ps":     "Fused Negative Multiply-Subtract of Packed Single-FP Values",
		"vfnmsub132sd":     "Fused Negative Multiply-Subtract of Scalar Double-FP Values",
		"vfnmsub132ss":     "Fused Negative Multiply-Subtract of Scalar Single-FP Values",
		"vfnmsub213pd":     "Fused Negative Multiply-Subtract of Packed Double-FP Values",
		"vfnmsub213ps":     "Fused Negative Multiply-Subtract of Packed Single-FP Values",
		"vfnmsub213sd":     "Fused Negative Multiply-Subtract of Scalar Double-FP Values",
		"vfnmsub213ss":     "Fused Negative Multiply-Subtract of Scalar Single-FP Values",
		"vfnmsub231pd":     "Fused Negative Multiply-Subtract of Packed Double-FP Values",
		"vfnmsub231ps":     "Fused Negative Multiply-Subtract of Packed Single-FP Values",
		"vfnmsub231sd":     "Fused Negative Multiply-Subtract of Scalar Double-FP Values",
		"vfnmsub231ss":     "Fused Negative Multiply-Subtract of Scalar Single-FP Values",
		"vgatherdpd":       "Gather Packed DP FP Values Using Signed Dword/Qword Indices",
		"vgatherdps":       "Gather Packed SP FP values Using Signed Dword/Qword Indices",
		"vgatherqpd":       "Gather Packed DP FP Values Using Signed Dword/Qword Indices",
		"vgatherqps":       "Gather Packed SP FP values Using Signed Dword/Qword Indices",
		"vinsertf128":      "Insert Packed Floating-Point Values",
		"vinserti128":      "Insert Packed Integer Values",
		"vmaskmov":         "Conditional SIMD Packed Loads and Stores",
		"vmovdqa":          "Move Aligned Packed Integer Values  [AVX]",
		"vmovdqa32":        "Move Aligned Packed Dword Values  [AVX512]",
		"vmovdqa64":        "Move Aligned Packed Qword Values  [AVX512]",
		"vmovdqu":          "Move Aligned Packed Integer Values  [AVX]",
		"vmovdqu8":         "Move Aligned Packed Byte Values  [AVX512]",
		"vmovdqu16":        "Move Aligned Packed Word Values  [AVX512]",
		"vmovdqu32":        "Move Aligned Packed Dword Values  [AVX512]",
		"vmovdqu64":        "Move Aligned Packed Qword Values  [AVX512]",
		"vmovshdup":        "Replicate Single-FP High Values  [AVX]",
		"vmovsldup":        "Replicate Single-FP Low Values  [AVX]",
		"vmovupd":          "Move Unaligned Packed Double-FP Values  [AVX]",
		"vmovups":          "Move Unaligned Packed Single-FP Values  [AVX]",
		"vmpsadbw":         "Compute Multiple Packed Sums of Absolute Difference  [AVX]",
		"vmulpd":           "Multiply Packed Double-FP Values  [AVX]",
		"vmulps":           "Multiply Packed Singl-FP Values  [AVX]",
		"vmulsd":           "Multiply Scalar Double-FP Values  [AVX]",
		"vmulss":           "Multiply Scalar Singl-FP Values  [AVX]",
		"vpblendd":         "Blend Packed Dwords",
		"vpbroadcast":      "Broadcast Integer Data",
		"vperm2f128":       "Permute Floating-Point Values",
		"vperm2i128":       "Permute Integer Values",
		"vpermd":           "Full Doublewords Element Permutation",
		"vpermilpd":        "Permute Double-FP Values",
		"vpermilps":        "Permute Single-FP Values",
		"vpermpd":          "Permute Double-FP Elements",
		"vpermps":          "Permute Single-FP Elements",
		"vpermq":           "Qwords Element Permutation",
		"vpgatherdd":       "Gather Packed Dword Values Using Signed Dword/Qword Indices",
		"vpgatherdq":       "Gather Packed Qword Values Using Signed Dword/Qword Indices",
		"vpgatherqd":       "Gather Packed Dword Values Using Signed Dword/Qword Indices",
		"vpgatherqq":       "Gather Packed Qword Values Using Signed Dword/Qword Indices",
		"vpmaskmov":        "Conditional SIMD Integer Packed Loads and Stores",
		"vpsllvd":          "Variable Bit Shift Left Logical",
		"vpsllvq":          "Variable Bit Shift Left Logical",
		"vpsravd":          "Variable Bit Shift Right Arithmetic",
		"vpsrlvd":          "Variable Bit Shift Right Logical",
		"vpsrlvq":          "Variable Bit Shift Right Logical",
		"vtestpd":          "Packed Bit Test",
		"vtestps":          "Packed Bit Test",
		"vzeroall":         "Zero All YMM Registers",
		"vzeroupper":       "Zero Upper Bits of YMM Registers",
		"wait":             "Wait",
		"wbinvd":           "Write Back and Invalidate Cache",
		"wrfsbase":         "Write FS/GS Segment Base",
		"wrgsbase":         "Write FS/GS Segment Base",
		"wrmsr":            "Write to Model Specific Register",
		"wrss":             "Write to Shadow Stack  [CET]",
		"wruss":            "Write to User Shadow Stack  [CET]",
		"xabort":           "Transactional Abort",
		"xacquire":         "Hardware Lock Elision Prefix Hints",
		"xadd":             "Exchange and Add",
		"xbegin":           "Transactional Begin",
		"xchg":             "Exchange Register/Memory with Register",
		"xend":             "Transactional End",
		"xgetbv":           "Get Value of Extended Control Register",
		"xlat":             "Table Look-up Translation",
		"xlatb":            "Table Look-up Translation",
		"xor":              "Logical Exclusive OR",
		"xorpd":            "Bitwise Logical XOR for Double-FP Values",
		"xorps":            "Bitwise Logical XOR for Single-FP Values",
		"xrelease":         "Hardware Lock Elision Prefix Hints",
		"xrstor":           "Restore Processor Extended States",
		"xrstors":          "Restore Processor Extended States Supervisor",
		"xsave":            "Save Processor Extended States",
		"xsavec":           "Save Processor Extended States with Compaction",
		"xsaveopt":         "Save Processor Extended States Optimized",
		"xsaves":           "Save Processor Extended States Supervisor",
		"xsetbv":           "Set Extended Control Register",
		"xtest":            "Test If In Transactional Execution",
	}

	Cond_x86_64 = map[string]string{
		"g":    "Greater",
		"ng":   "Not Greater",
		"ge":   "Greater or Equal",
		"nge":  "Not Greater or Equal",
		"l":    "Less",
		"nl":   "Not Less",
		"le":   "Less or Equal",
		"nle":  "Not Less or Equal",
		"a":    "Above",
		"na":   "Not Above",
		"ae":   "Above or Equal",
		"nae":  "Not Above or Equal",
		"b":    "Below",
		"nb":   "Not Below",
		"be":   "Below or Equal",
		"nbe":  "Not Below or Equal",
		"o":    "Overflow",
		"no":   "Not Overflow",
		"p":    "Parity",
		"np":   "Not Parity",
		"pe":   "Parity Even",
		"po":   "Parity Odd",
		"e":    "Equal",
		"ne":   "Not Equal",
		"s":    "Sign",
		"ns":   "Not Sign",
		"z":    "Zero",
		"nz":   "Not Zero",
		"cxz":  "CX register is Zero",
		"excz": "ECX register is Zero",
	}

	CondInsn_x86_64 = []string{"cmov", "fcmov", "j", "loop", "set"}
}
