package main

var (
	Insn_AArch64        map[string]string
	Cond_AArch64        map[string]string
	CondSetInsn_AArch64 []string
)

func init() {
	Insn_AArch64 = map[string]string{
		"adc":     "Add with Carry",
		"add":     "Add",
		"adr":     "Address: PC-relative",
		"adrp":    "Address of 4KB Page: PC-relative",
		"and":     "Bitwise AND",
		"asr":     "Arithmetic Shift Right",
		"asrv":    "Arithmetic Shift Right Variable",
		"at":      "Address Translate",
		"b":       "Branch",
		"bfi":     "Bit Field Insert",
		"bfm":     "Bit Field Move",
		"bfxil":   "Bit Field Extract and Insert at Low end",
		"bic":     "Bit Clear",
		"bl":      "Branch with Link",
		"blr":     "Branch with Link to Register",
		"br":      "Branch to Register",
		"brk":     "Debug Breakpoint",
		"cbnz":    "Compare and Branch if Not Zero",
		"cbz":     "Compare and Branch if Zero",
		"ccmn":    "Conditional Compare Negative, Set condition flags",
		"ccmp":    "Conditional Compare, Set condition flags",
		"cinc":    "Conditional Increment",
		"cinv":    "Conditional Invert",
		"clrex":   "Clear Exclusive tag",
		"cls":     "Count Leading Sign bits",
		"clz":     "Count Leading Zero bits",
		"cmn":     "Compare Negative, Set condition flags",
		"cmp":     "Compare, Set condition flags",
		"cneg":    "Condition Negate",
		"crc32b":  "CRC32 checksum from Byte",
		"crc32h":  "CRC32 checksum from Half-word",
		"crc32w":  "CRC32 checksum from Word",
		"crc32x":  "CRC32 checksum from Double-word",
		"crc32cb": "CRC32C checksum from Byte",
		"crc32ch": "CRC32C checksum from Half-word",
		"crc32cw": "CRC32C checksum from Word",
		"crc32cx": "CRC32C checksum from Double-word",
		"csel":    "Condition Select",
		"cset":    "Condition Set",
		"csetm":   "Condition Set Mask",
		"csinc":   "Condition Select Increment",
		"csinv":   "Condition Select Inversion",
		"csneg":   "Condition Select Negation",
		"dc":      "Data Cache operation",
		"dcps1":   "Debug Switch to exception Level 1",
		"dcps2":   "Debug Switch to exception Level 2",
		"dcps3":   "Debug Switch to exception Level 3",
		"dmb":     "Data Memory Barrier",
		"drps":    "Debug Restore Processor State",
		"dsb":     "Data Synchronization Barrier",
		"eon":     "Exclusive OR NOT",
		"eor":     "Exclusive OR",
		"eret":    "Exception Return",
		"extr":    "Extract Register",
		"hint":    "Hint",
		"hlt":     "Halt: debug-mode breakpoint",
		"hvc":     "Hyper-Visor Call",
		"ic":      "Instruction Cache operation",
		"isb":     "Instruction Synchronization Barrier",
		"ldar":    "Load-Acquire Register",
		"ldarb":   "Load-Acquire Register Byte",
		"ldarh":   "Load-Acquire Register Half-word",
		"ldaxp":   "Load-Acquire Exclusive Pair of Registers",
		"ldaxr":   "Load-Acquire Exclusive Register",
		"ldaxrb":  "Load-Acquire Exclusive Register Byte",
		"ldaxrh":  "Load-Acquire Exclusive Register Half-word",
		"ldnp":    "Load Pair of Registers with Non-temporal hint",
		"ldp":     "Load Pair of Registers",
		"ldpsw":   "Load Pair of Registers Signed Word",
		"ldr":     "Load Register",
		"ldrb":    "Load Register Byte",
		"ldrh":    "Load Register Half-word",
		"ldrsb":   "Load Register Signed Byte",
		"ldrsh":   "Load Register Signed Half-word",
		"ldrsw":   "Load Register Signed Word",
		"ldtr":    "Load Register: Unprivileged",
		"ldtrb":   "Load Register Byte: Unprivileged",
		"ldtrh":   "Load Register Half-word: Unprivileged",
		"ldtrsb":  "Load Register Signed Byte: Unprivileged",
		"ldtrsh":  "Load Register Signed Half-word: Unprivileged",
		"ldtrsw":  "Load Register Signed Word: Unprivileged",
		"ldur":    "Load Register: Unscaled offset",
		"ldurb":   "Load Register Byte: Unscaled offset",
		"ldurh":   "Load Register Half-word: Unscaled offset",
		"ldursb":  "Load Register Signed Byte: Unscaled offset",
		"ldursh":  "Load Register Signed Half-word: Unscaled offset",
		"ldursw":  "Load Register Signed Word: Unscaled offset",
		"ldxp":    "Load Exclusive Pair of Registers",
		"ldxr":    "Load Exclusive Register",
		"ldxrb":   "Load Exclusive Register Byte",
		"ldxrh":   "Load Exclusive Register Half-word",
		"lsl":     "Logical Shift Left",
		"lslv":    "Logical Shift Left Variable",
		"lsr":     "Logical Shift Right",
		"lsrv":    "Logical Shift Right Variable",
		"madd":    "Multiply-Add",
		"mneg":    "Multiply-Negate",
		"mov":     "Move Register or constant",
		"movk":    "Move 16-bit immediate to Register",
		"movn":    "Move inverse of shifted 16-bit immediate to Register",
		"movz":    "Move shifted 16-bit immediate to Register",
		"mrc":     "Move Coprocessor Register to CPU",
		"mrs":     "Move from System Register",
		"msr":     "Move to System Register",
		"msub":    "Multiply-Subtract",
		"mul":     "Multiply",
		"mvn":     "Move Register with NOT",
		"neg":     "Negate",
		"ngc":     "Negate with Carry",
		"nop":     "No Operation",
		"orn":     "Bitwise OR with NOT",
		"orr":     "Bitwise OR",
		"prfm":    "Pre-Fetch Memory",
		"prfum":   "Pre-Fetch Memory: Unscaled offset",
		"rbit":    "Reverse Bit order",
		"ret":     "Return from subroutine",
		"rev":     "Reverse Bytes",
		"rev16":   "Reverse Bytes in 16-bit Half-words",
		"rev32":   "Reverse Bytes in 32-bit Words",
		"ror":     "Rotate Right",
		"rorv":    "Rotate Right Variable",
		"sbc":     "Subtract with Carry",
		"sbfiz":   "Signed Bit Field Insert in Zero",
		"sbfm":    "Signed Bit Field Move",
		"sbfx":    "Signed Bit Field Extract",
		"sdiv":    "Signed Divide",
		"sev":     "Send Event",
		"sevl":    "Send Event Locally",
		"smc":     "Secure Monitor Call",
		"smaddl":  "Signed Multiply-Add Long",
		"smnegl":  "Signed Multiply-Negate Long",
		"smsubl":  "Signed Multiply-Subtract Long",
		"smulh":   "Signed Multiply High",
		"smull":   "Signed Multiply Long",
		"stlr":    "Store-Release Register",
		"stlrb":   "Store-Release Register Byte",
		"stlrh":   "Store-Release Register Half-word",
		"stlxp":   "Store-Release Exclusive Pair of Registers",
		"stlxr":   "Store-Release Exclusive Register",
		"stlxrb":  "Store-Release Exclusive Register Byte",
		"stlxrh":  "Store-Release Exclusive Register Half-word",
		"stnp":    "Store Pair of Registers with Non-temporal hint",
		"stp":     "Store Pair of Registers",
		"str":     "Store Register",
		"strb":    "Store Register Byte",
		"strh":    "Store Register Half-word",
		"sttr":    "Store Register: Unprivileged",
		"sttrb":   "Store Register Byte: Unprivileged",
		"sttrh":   "Store Register Half-word: Unprivileged",
		"stur":    "Store Register: Unscaled offset",
		"sturb":   "Store Register Byte: Unscaled offset",
		"sturh":   "Store Register Half-word: Unscaled offset",
		"stxp":    "Store Exclusive Pair of Registers",
		"stxr":    "Store Exclusive Register",
		"stxrb":   "Store Exclusive Register Byte",
		"stxrh":   "Store Exclusive Register Half-word",
		"sub":     "Subtract",
		"svc":     "Super-Visor Call",
		"sxtb":    "Signed-Extend Byte",
		"sxth":    "Signed-Extend Half-word",
		"sxtw":    "Signed-Extend Word",
		"sys":     "System Instruction",
		"sysl":    "System Instruction with Result",
		"tbnz":    "Test Bit and Branch if Non-Zero",
		"tbz":     "Test Bit and Branch if Zero",
		"tlbi":    "TLB Invalidate",
		"tst":     "Test, Set condition flags",
		"ubfiz":   "Unsigned Bit Field Insert in Zero",
		"ubfm":    "Unsigned Bit Field Move",
		"ubfx":    "Unsigned Bit Field Extract",
		"udiv":    "Unsigned Divide",
		"umaddl":  "Unsigned Multiply-Add Long",
		"umnegl":  "Unsigned Multiply-Negate Long",
		"umsubl":  "Unsigned Multiply-Subtract Long",
		"umulh":   "Unsigned Multiply High",
		"umull":   "Unsigned Multiply Long",
		"uxtb":    "Unsigned-Extend Byte",
		"uxth":    "Unsigned-Extend Half-word",
		"wfe":     "Wait For Event",
		"wfi":     "Wait For Interrupt",
		"yield":   "Yield hint",
	}

	Cond_AArch64 = map[string]string{
		"eq": "Equal",
		"ne": "Not Equal",
		"cs": "Higher or Same",
		"cc": "Lower",
		"mi": "Minus",
		"pl": "Plus",
		"vs": "Overflow",
		"vc": "No Overflow",
		"hi": "Higher",
		"hs": "Higher or Same",
		"lo": "Lower",
		"ls": "Lower or Same",
		"ae": "Above or Equal",
		"ge": "Greater Than or Equal",
		"gt": "Greater Than",
		"lt": "Less Than",
		"le": "Less Than or Equal",
		"al": "Always",
	}

	CondSetInsn_AArch64 = []string{"add", "adc", "and", "neg", "ngc", "sbc", "sub"}
}
